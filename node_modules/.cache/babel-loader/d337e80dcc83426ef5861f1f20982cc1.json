{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _promise = _interopRequireDefault(require(\"promise\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar StepZilla =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(StepZilla, _Component);\n\n  function StepZilla(props) {\n    var _this;\n\n    _classCallCheck(this, StepZilla);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(StepZilla).call(this, props));\n    _this.state = {\n      compState: _this.props.startAtStep,\n      navState: _this.getNavStates(_this.props.startAtStep, _this.props.steps.length)\n    };\n    _this.hidden = {\n      display: 'none'\n    }; // if user did not give a custom nextTextOnFinalActionStep, the nextButtonText becomes the default\n\n    _this.nextTextOnFinalActionStep = _this.props.nextTextOnFinalActionStep ? _this.props.nextTextOnFinalActionStep : _this.props.nextButtonText;\n\n    _this.applyValidationFlagsToSteps();\n\n    return _this;\n  } // extend the \"steps\" array with flags to indicate if they have been validated\n\n\n  _createClass(StepZilla, [{\n    key: \"applyValidationFlagsToSteps\",\n    value: function applyValidationFlagsToSteps() {\n      var _this2 = this;\n\n      this.props.steps.map(function (i, idx) {\n        if (_this2.props.dontValidate) {\n          i.validated = true;\n        } else {\n          // check if isValidated was exposed in the step, if yes then set initial state as not validated (false) or vice versa\n          // if HOCValidation is used for the step then mark it as \"requires to be validated. i.e. false\"\n          i.validated = typeof i.component.type === 'undefined' || typeof i.component.type.prototype.isValidated === 'undefined' && !_this2.isStepAtIndexHOCValidationBased(idx) ? true : false;\n        }\n\n        return i;\n      });\n    } // update the header nav states via classes so they can be styled via css\n\n  }, {\n    key: \"getNavStates\",\n    value: function getNavStates(indx, length) {\n      var styles = [];\n\n      for (var i = 0; i < length; i++) {\n        if (i < indx) {\n          styles.push('done');\n        } else if (i === indx) {\n          styles.push('doing');\n        } else {\n          styles.push('todo');\n        }\n      }\n\n      return {\n        current: indx,\n        styles: styles\n      };\n    }\n  }, {\n    key: \"getPrevNextBtnLayout\",\n    value: function getPrevNextBtnLayout(currentStep) {\n      // first set default values\n      var showPreviousBtn = true;\n      var showNextBtn = true;\n      var nextStepText = this.props.nextButtonText; // first step hide previous btn\n\n      if (currentStep === 0) {\n        showPreviousBtn = false;\n      } // second to last step change next btn text if supplied as props\n\n\n      if (currentStep === this.props.steps.length - 2) {\n        nextStepText = this.props.nextTextOnFinalActionStep || nextStepText;\n      } // last step hide next btn, hide previous btn if supplied as props\n\n\n      if (currentStep >= this.props.steps.length - 1) {\n        showNextBtn = false;\n        showPreviousBtn = this.props.prevBtnOnLastStep === false ? false : true;\n      }\n\n      return {\n        showPreviousBtn: showPreviousBtn,\n        showNextBtn: showNextBtn,\n        nextStepText: nextStepText\n      };\n    } // which step are we in?\n\n  }, {\n    key: \"checkNavState\",\n    value: function checkNavState(nextStep) {\n      if (this.props.onStepChange) {\n        this.props.onStepChange(nextStep);\n      }\n    } // set the nav state\n\n  }, {\n    key: \"setNavState\",\n    value: function setNavState(next) {\n      this.setState({\n        navState: this.getNavStates(next, this.props.steps.length)\n      });\n\n      if (next < this.props.steps.length) {\n        this.setState({\n          compState: next\n        });\n      }\n\n      this.checkNavState(next);\n    } // handles keydown on enter being pressed in any Child component input area. in this case it goes to the next (ignore textareas as they should allow line breaks)\n\n  }, {\n    key: \"handleKeyDown\",\n    value: function handleKeyDown(evt) {\n      if (evt.which === 13) {\n        if (!this.props.preventEnterSubmission && evt.target.type !== 'textarea') {\n          this.next();\n        } else if (evt.target.type !== 'textarea') {\n          evt.preventDefault();\n        }\n      }\n    } // this utility method lets Child components invoke a direct jump to another step\n\n  }, {\n    key: \"jumpToStep\",\n    value: function jumpToStep(evt) {\n      var _this3 = this;\n\n      if (typeof evt.target === 'undefined') {\n        // a child step wants to invoke a jump between steps. in this case 'evt' is the numeric step number and not the JS event\n        this.setNavState(evt);\n      } else {\n        // the main navigation step ui is invoking a jump between steps\n        // if stepsNavigation is turned off or user clicked on existing step again (on step 2 and clicked on 2 again) then ignore\n        if (!this.props.stepsNavigation || evt.target.value === this.state.compState) {\n          evt.preventDefault();\n          evt.stopPropagation();\n          return;\n        } // evt is a react event so we need to persist it as we deal with aync promises which nullifies these events (https://facebook.github.io/react/docs/events.html#event-pooling)\n\n\n        evt.persist();\n        var movingBack = evt.target.value < this.state.compState; // are we trying to move back or front?\n\n        var passThroughStepsNotValid = false; // if we are jumping forward, only allow that if inbetween steps are all validated. This flag informs the logic...\n\n        var proceed = false; // flag on if we should move on\n\n        this.abstractStepMoveAllowedToPromise(movingBack).then(function () {\n          var valid = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true; // validation was a success (promise or sync validation). In it was a Promise's resolve()\n          // ... then proceed will be undefined, so make it true. Or else 'proceed' will carry the true/false value from sync\n\n          proceed = valid;\n\n          if (!movingBack) {\n            _this3.updateStepValidationFlag(proceed);\n          }\n\n          if (proceed) {\n            if (!movingBack) {\n              // looks like we are moving forward, 'reduce' a new array of step>validated values we need to check and\n              // ... 'some' that to get a decision on if we should allow moving forward\n              passThroughStepsNotValid = _this3.props.steps.reduce(function (a, c, i) {\n                if (i >= _this3.state.compState && i < evt.target.value) {\n                  a.push(c.validated);\n                }\n\n                return a;\n              }, []).some(function (c) {\n                return c === false;\n              });\n            }\n          }\n        }).catch(function () {\n          // Promise based validation was a fail (i.e reject())\n          if (!movingBack) {\n            _this3.updateStepValidationFlag(false);\n          }\n        }).then(function () {\n          // this is like finally(), executes if error no no error\n          if (proceed && !passThroughStepsNotValid) {\n            if (evt.target.value === _this3.props.steps.length - 1 && _this3.state.compState === _this3.props.steps.length - 1) {\n              _this3.setNavState(_this3.props.steps.length);\n            } else {\n              _this3.setNavState(evt.target.value);\n            }\n          }\n        }).catch(function (e) {\n          if (e) {\n            // see note below called \"CatchRethrowing\"\n            // ... plus the finally then() above is what throws the JS Error so we need to catch that here specifically\n            setTimeout(function () {\n              throw e;\n            });\n          }\n        });\n      }\n    } // move next via next button\n\n  }, {\n    key: \"next\",\n    value: function next() {\n      var _this4 = this;\n\n      this.abstractStepMoveAllowedToPromise().then(function () {\n        var proceed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true; // validation was a success (promise or sync validation). In it was a Promise's resolve() then proceed will be undefined,\n        // ... so make it true. Or else 'proceed' will carry the true/false value from sync validation\n\n        _this4.updateStepValidationFlag(proceed);\n\n        if (proceed) {\n          _this4.setNavState(_this4.state.compState + 1);\n        }\n      }).catch(function (e) {\n        if (e) {\n          // CatchRethrowing: as we wrap StepMoveAllowed() to resolve as a Promise, the then() is invoked and the next React Component is loaded.\n          // ... during the render, if there are JS errors thrown (e.g. ReferenceError) it gets swallowed by the Promise library and comes in here (catch)\n          // ... so we need to rethrow it outside the execution stack so it behaves like a notmal JS error (i.e. halts and prints to console)\n          //\n          setTimeout(function () {\n            throw e;\n          });\n        } // Promise based validation was a fail (i.e reject())\n\n\n        _this4.updateStepValidationFlag(false);\n      });\n    } // move behind via previous button\n\n  }, {\n    key: \"previous\",\n    value: function previous() {\n      if (this.state.compState > 0) {\n        this.setNavState(this.state.compState - 1);\n      }\n    } // update step's validation flag\n\n  }, {\n    key: \"updateStepValidationFlag\",\n    value: function updateStepValidationFlag() {\n      var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this.props.steps[this.state.compState].validated = val; // note: if a step component returns 'underfined' then treat as \"true\".\n    } // are we allowed to move forward? via the next button or via jumpToStep?\n\n  }, {\n    key: \"stepMoveAllowed\",\n    value: function stepMoveAllowed() {\n      var skipValidationExecution = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var proceed = false;\n\n      if (this.props.dontValidate) {\n        proceed = true;\n      } else {\n        if (skipValidationExecution) {\n          // we are moving backwards in steps, in this case dont validate as it means the user is not commiting to \"save\"\n          proceed = true;\n        } else if (this.isStepAtIndexHOCValidationBased(this.state.compState)) {\n          // the user is using a higer order component (HOC) for validation (e.g react-validation-mixin), this wraps the StepZilla steps as a HOC,\n          // so use hocValidationAppliedTo to determine if this step needs the aync validation as per react-validation-mixin interface\n          proceed = this.refs.activeComponent.refs.component.isValidated();\n        } else if (Object.keys(this.refs).length === 0 || typeof this.refs.activeComponent.isValidated === 'undefined') {\n          // if its a form component, it should have implemeted a public isValidated class (also pure componenets wont even have refs - i.e. a empty object). If not then continue\n          proceed = true;\n        } else {\n          // user is moving forward in steps, invoke validation as its available\n          proceed = this.refs.activeComponent.isValidated();\n        }\n      }\n\n      return proceed;\n    }\n  }, {\n    key: \"isStepAtIndexHOCValidationBased\",\n    value: function isStepAtIndexHOCValidationBased(stepIndex) {\n      return this.props.hocValidationAppliedTo.length > 0 && this.props.hocValidationAppliedTo.indexOf(stepIndex) > -1;\n    } // a validation method is each step can be sync or async (Promise based), this utility abstracts the wrapper stepMoveAllowed to be Promise driven regardless of validation return type\n\n  }, {\n    key: \"abstractStepMoveAllowedToPromise\",\n    value: function abstractStepMoveAllowedToPromise(movingBack) {\n      return _promise.default.resolve(this.stepMoveAllowed(movingBack));\n    } // get the classmame of steps\n\n  }, {\n    key: \"getClassName\",\n    value: function getClassName(className, i) {\n      var liClassName = \"\".concat(className, \"-\").concat(this.state.navState.styles[i]); // if step ui based navigation is disabled, then dont highlight step\n\n      if (!this.props.stepsNavigation) {\n        liClassName += ' no-hl';\n      }\n\n      return liClassName;\n    } // render the steps as stepsNavigation\n\n  }, {\n    key: \"renderSteps\",\n    value: function renderSteps() {\n      var _this5 = this;\n\n      return this.props.steps.map(function (s, i) {\n        return _react.default.createElement(\"li\", {\n          className: _this5.getClassName('progtrckr', i),\n          onClick: function onClick(evt) {\n            _this5.jumpToStep(evt);\n          },\n          key: i,\n          value: i\n        }, _react.default.createElement(\"em\", null, i + 1), _react.default.createElement(\"span\", null, _this5.props.steps[i].name));\n      });\n    } // main render of stepzilla container\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this6 = this;\n\n      var props = this.props;\n\n      var _this$getPrevNextBtnL = this.getPrevNextBtnLayout(this.state.compState),\n          nextStepText = _this$getPrevNextBtnL.nextStepText,\n          showNextBtn = _this$getPrevNextBtnL.showNextBtn,\n          showPreviousBtn = _this$getPrevNextBtnL.showPreviousBtn; // clone the step component dynamically and tag it as activeComponent so we can validate it on next. also bind the jumpToStep piping method\n\n\n      var cloneExtensions = {\n        jumpToStep: function jumpToStep(t) {\n          _this6.jumpToStep(t);\n        }\n      };\n      var componentPointer = this.props.steps[this.state.compState].component; // can only update refs if its a regular React component (not a pure component), so lets check that\n\n      if (componentPointer instanceof _react.Component || componentPointer.type && componentPointer.type.prototype instanceof _react.Component) {\n        // unit test deteceted that instanceof Component can be in either of these locations so test both (not sure why this is the case)\n        cloneExtensions.ref = 'activeComponent';\n      }\n\n      var compToRender = _react.default.cloneElement(componentPointer, cloneExtensions);\n\n      return _react.default.createElement(\"div\", {\n        className: \"multi-step\",\n        onKeyDown: function onKeyDown(evt) {\n          _this6.handleKeyDown(evt);\n        }\n      }, this.props.showSteps ? _react.default.createElement(\"ol\", {\n        className: \"progtrckr\"\n      }, this.renderSteps()) : _react.default.createElement(\"span\", null), compToRender, _react.default.createElement(\"div\", {\n        style: this.props.showNavigation ? {} : this.hidden,\n        className: \"footer-buttons\"\n      }, _react.default.createElement(\"button\", {\n        type: \"button\",\n        style: showPreviousBtn ? {} : this.hidden,\n        className: props.backButtonCls,\n        onClick: function onClick() {\n          _this6.previous();\n        },\n        id: \"prev-button\"\n      }, this.props.backButtonText), _react.default.createElement(\"button\", {\n        type: \"button\",\n        style: showNextBtn ? {} : this.hidden,\n        className: props.nextButtonCls,\n        onClick: function onClick() {\n          _this6.next();\n        },\n        id: \"next-button\"\n      }, nextStepText)));\n    }\n  }]);\n\n  return StepZilla;\n}(_react.Component);\n\nexports.default = StepZilla;\nStepZilla.defaultProps = {\n  showSteps: true,\n  showNavigation: true,\n  stepsNavigation: true,\n  prevBtnOnLastStep: true,\n  dontValidate: false,\n  preventEnterSubmission: false,\n  startAtStep: 0,\n  nextButtonText: 'Next',\n  nextButtonCls: 'btn btn-prev btn-primary btn-lg pull-right',\n  backButtonText: 'Previous',\n  backButtonCls: 'btn btn-next btn-primary btn-lg pull-left',\n  hocValidationAppliedTo: []\n};\nStepZilla.propTypes = {\n  steps: _propTypes.default.arrayOf(_propTypes.default.shape({\n    name: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]).isRequired,\n    component: _propTypes.default.element.isRequired\n  })).isRequired,\n  showSteps: _propTypes.default.bool,\n  showNavigation: _propTypes.default.bool,\n  stepsNavigation: _propTypes.default.bool,\n  prevBtnOnLastStep: _propTypes.default.bool,\n  dontValidate: _propTypes.default.bool,\n  preventEnterSubmission: _propTypes.default.bool,\n  startAtStep: _propTypes.default.number,\n  nextButtonText: _propTypes.default.string,\n  nextButtonCls: _propTypes.default.string,\n  backButtonCls: _propTypes.default.string,\n  backButtonText: _propTypes.default.string,\n  hocValidationAppliedTo: _propTypes.default.array,\n  onStepChange: _propTypes.default.func\n};","map":null,"metadata":{},"sourceType":"script"}